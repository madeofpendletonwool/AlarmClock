- name: Setup Alarm Clock on Raspberry Pi
  hosts: localhost
  user: pi
  become: yes

  tasks:

  - name: "Update cache & Full system update"
    apt:
      update_cache: true
      upgrade: dist
      cache_valid_time: 3600
      force_apt_get: true

  - name: Install docker
    ansible.builtin.apt:
      name: docker.io
      update_cache: yes

  - name: Install docker-compose
    ansible.builtin.apt:
      name: docker-compose

  - name: Install python3 if not already installed
    ansible.builtin.apt:
      name: python3

  - name: Install pip
    ansible.builtin.apt:
      name: pip
  
  - name: Install Alarm dependancies - pysimplegui
    ansible.builtin.pip:
      name: pysimplegui

  - name: Install Alarm dependancies - tkinter
    ansible.builtin.pip:
      name: tk

  - name: Install Alarm dependancies - pyglet
    ansible.builtin.pip:
      name: pyglet

  - name: Install Alarm dependancies - pyyaml
    ansible.builtin.pip:
      name: pyyaml

  - name: Install apt tkinter
    ansible.builtin.apt:
      name: python-tk

  - name: Clone a repo with separate git directory
    ansible.builtin.git:
      repo: https://github.com/waveshare/LCD-show.git
      dest: /home/pi
    
  - name: Change file ownership, group and permissions
    ansible.builtin.file:
      path: /home/pi/LCD-show/LCD35-show
      mode: '0777'

  - name: Install screen drivers
    ansible.builtin.shell: LCD35-show
    args:
      chdir: /home/pi/LCD-show

# Next - Setup python script to start by default

  - name: Pull Alarm Clock files and verify they are in the home dir for user pi
    ansible.builtin.git:
      repo: https://github.com/madeofpendletonwool/AlarmClock.git
      dest: /home/pi

  - name: Start Alarm Clock at Boot
    ansible.builtin.cron:
      name: "Boot Python Alarm Clock"
      special_time: reboot
      job: "/home/pi/AlarmClock/alarm.py"

# Reboot after updating and to start up the script

  - name: Unconditionally reboot the machine with all defaults
    ansible.builtin.reboot: