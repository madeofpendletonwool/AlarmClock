#!/bin/python3

import time
import datetime
import PySimpleGUI as sg
import yaml
import tkinter.font
import os
import pygame
import pyttsx3

snooze_setting = 600
Time_Period = ("AM", "PM")
Hour = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
Min = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59)

def now(Set_Format, timetype):
    if timetype == 'time':

        home_folder = os.path.expanduser('~')
        with open(f'{home_folder}/pyArmClock/config.yaml') as f:
            TimePull = yaml.load(f, Loader=yaml.FullLoader)

        #preset font and theme
        alarm_set=False
        SetMode = TimePull['TimeSet'][0]['TimeSet']

        if SetMode == 'Automatic':

            if Set_Format == '24':
                ntime=datetime.datetime.now()
                nt=ntime.strftime('%H:%M:%S')
                return nt
            else: 
                ntime=datetime.datetime.now()
                nt_24=ntime.strftime('%H:%M:%S')
                nt = reverse_time_conversion(nt_24)
                return nt

        elif SetMode == 'Manual':

            print('test')
    elif timetype == 'date':

        today = datetime.date.today()
        nt = today.strftime("%B %d, %Y")
        return nt



def play_song(playsong, music_status, Set_Format):

    home_folder = os.path.expanduser('~')
    with open(f'{home_folder}/pyArmClock/config.yaml') as f:
        speak_setting = yaml.load(f, Loader=yaml.FullLoader)

    #preset font and theme
    alarm_set=False
    speak_enabled = speak_setting['VoiceSetting'][0]['VoiceSetting']
    speak_volume = speak_setting['VoiceVolume'][0]['VoiceVolume']

    if speak_enabled == 'Enabled':
            

        if music_status == 'play':


            # Get Voice Volume Setting
            if speak_volume == '25%':
                newVolume = .3
            elif speak_volume == '50%':
                newVolume = .5
            elif speak_volume == '75%':
                newVolume = .7
            elif speak_volume == '100%':
                newVolume = 1

            #Get Current Time
            wake_current = now(Set_Format, 'time')


            engine = pyttsx3.init()
            engine.setProperty('rate', 115)
            engine.setProperty('volume', newVolume)
            engine.setProperty('voice', 'english-us')

            engine.say(f'The time is {wake_current}')
            engine.runAndWait()

            pygame.mixer.init()
            pygame.mixer.music.load(playsong)
            pygame.mixer.music.set_volume(0.7)
            pygame.mixer.music.play(loops=-1)

        elif music_status == 'pause':

            pygame.mixer.music.pause()
    
    elif speak_enabled == 'Disabled':

        if music_status == 'play':

            pygame.mixer.init()
            pygame.mixer.music.load(playsong)
            pygame.mixer.music.set_volume(0.7)
            pygame.mixer.music.play(loops=-1)


        elif music_status == 'pause':

            pygame.mixer.music.pause()

def Wake_Up(song, snooze_setting, Set_Format, theme, fullscreen_mode, cfont):
    snooze_timer = 0
    snooze_display = 0
    play_song(song, 'play', Set_Format)
    sg.theme(theme)   # Add a touch of color
        # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                [sg.Push(), sg.Button('Ok'), sg.Button('Snooze'), sg.Push()],
                [sg.Push(), sg.Text(f'Time to wake up!'), sg.Push()],
                [sg.VPush()]
                
            ]
            # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
        # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')

        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"
        if event == 'timeout':
            window['clocktime'].update(now(Set_Format, 'time'))
            window['date'].update(now(Set_Format, 'date'))
        if event == 'Snooze':
            window.close()
            while True:
                alarm_time = snooze_setting / 60
                alarm_timeint = int(alarm_time)
                play_song(song, 'pause', Set_Format)
                
                layout = [  [sg.VPush()],
                            [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                            [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                            [sg.Push(), sg.Button('Cancel'), sg.Push()],
                            [sg.Push(), sg.Text(f'Alarm snooze set for {alarm_timeint} min(s)'), sg.Push()],
                            [sg.VPush()]
                            
                        ]
                        # Create the Window
                window = sg.Window('pyArmClock', layout)
                    # Event Loop to process "events" and get the "values" of the inputs
                while True:
                    event, values = window.read(timeout=10,timeout_key='timeout')
                    if fullscreen_mode == True:
                        window.Maximize()
                        window.TKroot["cursor"] = "none"
                    if event == 'timeout':
                        window['clocktime'].update(now(Set_Format, 'time'))
                        window['date'].update(now(Set_Format, 'date'))
                        snooze_timer += 10
                        snooze_display, alarm_now = alarm_snooze(snooze_timer, snooze_setting)
                    if event == 'Cancel':
                        window.close()
                        main()
                    if alarm_now == True:
                        window.close()

                        play_song(song, 'play', Set_Format)
                        sg.theme(theme)   # Add a touch of color
                            # All the stuff inside your window.
                        layout = [  [sg.VPush()],
                                    [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                                    [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                                    [sg.Push(), sg.Button('Ok'), sg.Button('Snooze'), sg.Push()],
                                    [sg.Push(), sg.Text(f'Time to wake up!'), sg.Push()],
                                    [sg.VPush()]
                                    
                                ]
                                # Create the Window
                        window = sg.Window('pyArmClock', layout)
                            # Event Loop to process "events" and get the "values" of the inputs
                        while True:
                            event, values = window.read(timeout=10,timeout_key='timeout')

                            if fullscreen_mode == True:
                                window.Maximize()
                                window.TKroot["cursor"] = "none"
                            if event == 'timeout':
                                window['clocktime'].update(now(Set_Format, 'time'))
                                window['date'].update(now(Set_Format, 'date'))
                            if event == 'Snooze':
                                window.close()
                                lazy_snooze(song, snooze_setting, Set_Format, theme, fullscreen_mode, cfont)
                            if event == sg.WIN_CLOSED or event == 'Ok': # if user closes window or clicks cancel
                                play_song(song, 'pause', Set_Format)
                                window.close()
                                main()
        elif event == 'Ok' or event == sg.WIN_CLOSED:
            window.close()
            play_song(song, 'pause', Set_Format)
            main()

def lazy_snooze(song, snooze_setting, Set_Format, theme, fullscreen_mode, cfont):
    snooze_timer = 0
    snooze_display = 0
    while True:
        alarm_time = snooze_setting / 60
        alarm_timeint = int(alarm_time)
        play_song(song, 'pause', Set_Format)
        
        layout = [  [sg.VPush()],
                    [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                    [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                    [sg.Push(), sg.Button('Cancel'), sg.Push()],
                    [sg.Push(), sg.Text(f'Alarm snooze set for {alarm_timeint} min(s)'), sg.Push()],
                    [sg.VPush()]
                    
                ]
                # Create the Window
        window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
            # Event Loop to process "events" and get the "values" of the inputs
        while True:
            event, values = window.read(timeout=10,timeout_key='timeout')
            if fullscreen_mode == True:
                window.Maximize()
                window.TKroot["cursor"] = "none"
            if event == 'timeout':
                window['clocktime'].update(now(Set_Format, 'time'))
                window['date'].update(now(Set_Format, 'date'))
                snooze_timer += 10
                snooze_display, alarm_now = alarm_snooze(snooze_timer, snooze_setting)
            if event == 'Cancel':
                window.close()
                main()
            if alarm_now == True:
                window.close()

                play_song(song, 'play', Set_Format)
                sg.theme(theme)   # Add a touch of color
                    # All the stuff inside your window.
                layout = [  [sg.VPush()],
                            [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                            [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                            [sg.Push(), sg.Button('Ok'), sg.Button('Snooze'), sg.Push()],
                            [sg.Push(), sg.Text(f'Time to wake up!'), sg.Push()],
                            [sg.VPush()]
                            
                        ]
                        # Create the Window
                window = sg.Window('pyArmClock', layout)
                    # Event Loop to process "events" and get the "values" of the inputs
                while True:
                    event, values = window.read(timeout=10,timeout_key='timeout')

                    if fullscreen_mode == True:
                        window.Maximize()
                        window.TKroot["cursor"] = "none"
                    if event == 'timeout':
                        window['clocktime'].update(now(Set_Format, 'time'))
                        window['date'].update(now(Set_Format, 'date'))
                    if event == 'Snooze':
                        window.close()
                        lazy_snooze(song, snooze_setting, Set_Format, theme, fullscreen_mode, cfont)
                    if event == sg.WIN_CLOSED or event == 'Ok': # if user closes window or clicks cancel
                        play_song(song, 'pause', Set_Format)
                        window.close()
                        main()

def alarm_snooze(snooze_timer, snooze_setting):
    snooze_math = snooze_setting / 60
    snooze_conv = snooze_math * 60000
    alarm_now = False
    if snooze_timer == int(snooze_conv):
        alarm_now = True
    snooze_display = 1
    return snooze_display, alarm_now



def clock_during_alarm():
    sg.theme(theme)   # Add a touch of color
    # All the stuff inside your window.
    layout = [  [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                [sg.Text('',key='clocktime',font=(cfont,60),justification='center')],
                [sg.Text('When Would you like to wake up?')],
                [sg.Text('Select Time:')],
                [sg.Combo(Hour), sg.Combo(Min), sg.Combo(Time_Period)],
                [sg.Button('Ok')],
                [sg.Button('Choose Saved Alarm'), sg.FileBrowse('Choose Song', file_types=(("MP3 files", "*.mp3"),))],
                [sg.Button('Set Theme'), sg.Button('Clock Font')]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if event == 'timeout':
            window['clocktime'].update(now(Set_Format, 'time'))
            window['date'].update(now(Set_Format, 'date'))

        if event == 'Set Theme':
            theme_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting)

        if event == 'Choose Saved Alarm':
            alarm_select(theme)

def alarm(set_alarm_timer, song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode):
    alarm_set=True
    sg.theme(theme)   # Add a touch of color
        # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                [sg.Push(), sg.Button('Cancel Set Alarm'), sg.Button('Set Theme'), sg.Button('Clock Font'), sg.Push()],
                [sg.Push(), sg.Text(f'Alarm Currrently Set for: {set_time}'), sg.Push()],
                [sg.VPush()]
                
            ]
            # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
        # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"
        if event == 'timeout':
            window['clocktime'].update(now(Set_Format, 'time'))
            window['date'].update(now(Set_Format, 'date'))
        if event == 'Cancel Set Alarm':
            window.close()
            main()
        if event == 'Set Theme':
            window.close()
            theme_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
        if event == 'Clock Font':
            window.close()
            clock_font(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
        current_time = datetime.datetime.now()
        currentnow = current_time.strftime("%H:%M:%S")
        date = current_time.strftime("%d/%m/%Y")
        if currentnow == set_alarm_timer:
            window.close()
            Wake_Up(song, snooze_setting, Set_Format, theme, fullscreen_mode, cfont)
            break

def time_conversion():
    # Conversions to make time work - 12 to 24
    if time_section == "PM":
        hour_conv = hour_time + 12
    else: hour_conv = hour_time

    if min_time < 10:
        min_strconv = str(min_time)
        min_conv = "0" + min_strconv
    else: min_conv = str(min_time)

    if hour_conv < 10:
        hour_strconv = str(hour_conv)
        hour_convfin = "0" + hour_strconv
    else: hour_convfin = str(hour_conv)

def reverse_time_conversion(alarm_convert):

    # Conversions to make time work in reverse order - 24 to 12

    rev_hour = alarm_convert[:2]
    rev_min = alarm_convert[3:5]

    if rev_hour[:1] == '0':
        rev_hour1 = rev_hour[:2]
    else: rev_hour1 = rev_hour

    if rev_min[:1] == '0':
        rev_min1 = rev_min[:2]
    else: rev_min1 = rev_min

    num_rev_hour = int(rev_hour1)
    num_rev_min = int(rev_min1)

    if num_rev_hour > 12:
        num_rev_hourconv = num_rev_hour - 12
        rev_time_period = 'PM'
    else: 
        rev_time_period = 'AM'
        num_rev_hourconv = num_rev_hour

    num_rev_hourconv1 = str(num_rev_hourconv)

    if num_rev_min < 10:
        num_rev_minconv = '0' + str(num_rev_min)
    else: num_rev_minconv = str(num_rev_min)

    rev_time_convert = f'{num_rev_hourconv1}:{num_rev_minconv} {rev_time_period}'
    return rev_time_convert

def alarm_select(theme, song, snooze_setting, cfont, set_time, Set_Format, fullscreen_mode, screen_size):
        while True:
            sg.theme(theme)   # Add a touch of color
            #get home folder
            home_folder = os.path.expanduser('~')
            # Call in alarms file
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                alarms = yaml.load(f, Loader=yaml.FullLoader)

            # Time Conversion
                rtc1 = reverse_time_conversion(alarms['Alarm1'][1]['Time'])
                rtc2 = reverse_time_conversion(alarms['Alarm2'][1]['Time'])
                rtc3 = reverse_time_conversion(alarms['Alarm3'][1]['Time'])
            # All the stuff inside your window.
                layout = [  [sg.VPush()],
                            [sg.Push(), sg.Text('Alarm 1:'), sg.Push()],
                            [sg.Push(), sg.Text(alarms['Alarm1'][0]['Alarm_Name']), sg.Text('|'), sg.Text(rtc1), sg.Push()],
                            [sg.Push(), sg.Button(f'Wake up to {alarms["Alarm1"][0]["Alarm_Name"]}?'), sg.Button(f'Edit {alarms["Alarm1"][0]["Alarm_Name"]}?'), sg.Button(f'Delete {alarms["Alarm1"][0]["Alarm_Name"]}?'), sg.Push()],
                            [sg.Push(), sg.Text('Alarm 2:'), sg.Push()],
                            [sg.Push(), sg.Text(alarms['Alarm2'][0]['Alarm_Name']), sg.Text('|'), sg.Text(rtc2), sg.Push()],
                            [sg.Push(), sg.Button(f'Wake up to {alarms["Alarm2"][0]["Alarm_Name"]}?'), sg.Button(f'Edit {alarms["Alarm2"][0]["Alarm_Name"]}?'), sg.Button(f'Delete {alarms["Alarm2"][0]["Alarm_Name"]}?'), sg.Push()],
                            [sg.Push(), sg.Text('Alarm 3:'), sg.Push()],
                            [sg.Push(), sg.Text(alarms['Alarm3'][0]['Alarm_Name']), sg.Text('|'), sg.Text(rtc3), sg.Push()],
                            [sg.Push(), sg.Button(f'Wake up to {alarms["Alarm3"][0]["Alarm_Name"]}?'), sg.Button(f'Edit {alarms["Alarm3"][0]["Alarm_Name"]}?'), sg.Button(f'Delete {alarms["Alarm3"][0]["Alarm_Name"]}?'), sg.Push()],
                            [sg.Push(), sg.Button('Ok'), sg.Push()],
                            [sg.VPush()]            
                        ]
                    
                window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True, finalize=True)
                if fullscreen_mode == True:
                    window.Maximize()
                    window.TKroot["cursor"] = "none"
                while True:
                    event, values = window.read()

                    if event == sg.WIN_CLOSED or event == 'Ok': # if user closes window or clicks cancel
                        window.close()
                        main()

                    if event == f'Edit {alarms["Alarm1"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm1"
                        window.close()
                        edit_alarm(edit_alarm_no, theme, fullscreen_mode)
                    elif event == f'Edit {alarms["Alarm2"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm2"
                        window.close()
                        edit_alarm(edit_alarm_no, theme, fullscreen_mode)
                    elif event == f'Edit {alarms["Alarm3"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm3"
                        window.close()
                        edit_alarm(edit_alarm_no, theme, fullscreen_mode)

                    if event == f'Delete {alarms["Alarm1"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm1"
                        window.close()
                        Delete_alarm(edit_alarm_no, theme, fullscreen_mode)
                    elif event == f'Delete {alarms["Alarm2"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm2"
                        window.close()
                        Delete_alarm(edit_alarm_no, theme, fullscreen_mode)
                    elif event == f'Delete {alarms["Alarm3"][0]["Alarm_Name"]}?':
                        edit_alarm_no = "Alarm3"
                        window.close()
                        Delete_alarm(edit_alarm_no, theme, fullscreen_mode)

                    if event == f'Wake up to {alarms["Alarm1"][0]["Alarm_Name"]}?':
                        window.close()
                        set_time = reverse_time_conversion(alarms['Alarm1'][1]['Time'])
                        alarm(alarms['Alarm1'][1]['Time'], song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode, screen_size)
                        break
                    elif event == f'Wake up to {alarms["Alarm2"][0]["Alarm_Name"]}?':
                        set_time = reverse_time_conversion(alarms['Alarm2'][1]['Time'])
                        window.close()
                        alarm(alarms['Alarm2'][1]['Time'], song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode, screen_size)
                        break
                    elif event == f'Wake up to {alarms["Alarm3"][0]["Alarm_Name"]}?':
                        set_time = reverse_time_conversion(alarms['Alarm3'][1]['Time'])
                        window.close()
                        alarm(alarms['Alarm3'][1]['Time'], song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode, screen_size)
                        break

def edit_alarm(edit_alarm_no, theme, fullscreen_mode):

    edit_Time_Period = ("AM", "PM")
    edit_Hour = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
    edit_Min = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60)

    sg.theme(theme)   # Add a touch of color
    #get home folder
    home_folder = os.path.expanduser('~')
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('New Alarm Name:'), sg.Push()],
                [sg.Push(), sg.InputText(), sg.Push()],
                [sg.Push(), sg.Text('Alarm Time'), sg.Push()],
                [sg.Push(), sg.Combo(edit_Hour), sg.Combo(edit_Min), sg.Combo(edit_Time_Period), sg.Push()],
                [sg.Push(), sg.Button('Save'), sg.Button('Cancel'), sg.Push()],
                [sg.VPush()]             
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True, finalize=True)
    if fullscreen_mode == True:
        window.Maximize()
        window.TKroot["cursor"] = "none"
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values1 = window.read()
        print(fullscreen_mode)

        if event == 'Save':
            window.close()

            New_Name = values1[0]

            new_hour_temp = values1[1]
            new_hour_time = values1[1]
            new_min_time = values1[2]
            new_time_section = values1[3]

            # Conversions to make time work 
            if new_time_section == "PM":
                new_hour_conv = new_hour_time + 12
            else: new_hour_conv = new_hour_time

            if new_min_time < 10:
                new_min_strconv = str(new_min_time)
                new_min_conv = "0" + new_min_strconv
            else: new_min_conv = str(new_min_time)

            if new_hour_conv < 10:
                new_hour_strconv = str(new_hour_conv)
                new_hour_convfin = "0" + new_hour_strconv
            else: new_hour_convfin = str(new_hour_conv)

            new_current_time = time.localtime()
            if new_current_time.tm_sec < 10:
                new_sec_strconv = str(new_current_time.tm_sec)
                new_sec_conv = "0" + new_sec_strconv
            else: new_sec_conv = str(new_current_time.tm_sec)

            new_24_time_value = f"{new_hour_convfin}:{new_min_conv}:{new_sec_conv}"


            
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_alarms = yaml.safe_load(f)

            for yaml_alarms[edit_alarm_no][0]["Alarm_Name"] in yaml_alarms:
                yaml_alarms[edit_alarm_no][0]["Alarm_Name"] = New_Name
            
            for yaml_alarms[edit_alarm_no][1]["Time"] in yaml_alarms:
                yaml_alarms[edit_alarm_no][1]["Time"] = new_24_time_value

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_alarms, f)
            
            
            break
 
        if event == sg.WIN_CLOSED or 'Cancel':
            window.close()
            break
            

def Delete_alarm(edit_alarm_no, theme, fullscreen_mode):

    sg.theme(theme)   # Add a touch of color
    #get home folder
    home_folder = os.path.expanduser('~')
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text(f'Are you sure you want to delete {edit_alarm_no}? This will reset it back to defaults.'), sg.Push()],
                [sg.Push(), sg.Button('Yes'), sg.Button('No'), sg.Push()],
                [sg.VPush()]     
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True, finalize=True)
    if fullscreen_mode == True:
        window.Maximize()
        window.TKroot["cursor"] = "none"
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values1 = window.read()

        Reset_Name = "New Alarm"
        reset_alarm_value = "08:00:00"


        if event == 'Yes':
            window.close()
            
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_alarms = yaml.safe_load(f)

            for yaml_alarms[edit_alarm_no][0]["Alarm_Name"] in yaml_alarms:
                yaml_alarms[edit_alarm_no][0]["Alarm_Name"] = Reset_Name
            
            for yaml_alarms[edit_alarm_no][1]["Time"] in yaml_alarms:
                yaml_alarms[edit_alarm_no][1]["Time"] = reset_alarm_value

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_alarms, f)
            
            
            break
 
        if event == sg.WIN_CLOSED or 'No':
            window.close()
            break

def snooze_set(theme, cfont, song, alarm_set, set_alarm_timer, Set_Format, fullscreen_mode):
    #Set Home
    home_folder = os.path.expanduser('~')

    snooze_options = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
    sg.theme(theme)   # Add a touch of color
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('How long would you like Snooze to be set for?'), sg.Push()],
                [sg.Push(), sg.Combo(snooze_options), sg.Text('mins'), sg.Push()],
                [sg.Push(), sg.Button('Ok'), sg.Button('Cancel'), sg.Push()],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        #select and click 'OK', change theme value 
        #and pass over  make_window function it
        if event == 'Ok':
            snooze_setting = values[0] * 60
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_snooze = yaml.safe_load(f)

            for yaml_snooze['SetSnooze'][0]["Set_Snooze"] in yaml_snooze:
                yaml_snooze['SetSnooze'][0]["Set_Snooze"] = snooze_setting

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_snooze, f)

            window.close()
            main()
        if event == "Cancel" or event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

def alarm_options(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    sg.theme(theme)   # Add a touch of color
    #Set Home
    home_folder = os.path.expanduser('~')
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Button('Manually Set Clock Time - (Manual config If Using Offline)'), sg.Push()],
                [sg.Push(), sg.Button('Saved Alarms'), sg.Button('Choose Song'), sg.Button('Clock Format'), sg.Push()],
                [sg.Push(), sg.Button(' Set Theme '), sg.Button('Clock Font'), sg.Button(' Snooze Duration '), sg.Push()],
                [sg.Push(), sg.Button('Time Speak Settings'), sg.Push()],
                [sg.Push(), sg.Button('Ok'), sg.Push()],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, finalize=True, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"
        #Set Song Info
        if event == 'Choose Song':
            window.close()
            song_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        if event == 'Manually Set Clock Time - (Manual config If Using Offline)':
            window.close()
            time_set(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        if event == ' Set Theme ':
            window.close()
            theme_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        if event == 'Clock Font':
            window.close()
            clock_font(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
        
        if event == ' Snooze Duration ':
            window.close()
            snooze_setting = snooze_set(theme, cfont, song, alarm_set, set_alarm_timer, Set_Format, fullscreen_mode)

        if event == 'Time Speak Settings':
            window.close()
            speak_settings(theme, cfont, song, alarm_set, set_alarm_timer, Set_Format, fullscreen_mode)

        if event == 'Clock Format':
            window.close()
            clock_format(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        if event == 'Saved Alarms':
            window.Close()
            alarm_select(theme, song, snooze_setting, cfont, set_time, Set_Format, fullscreen_mode)

        if event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

        if event == 'Ok': # if user closes window or clicks cancel
            window.close()
            make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
            break

def speak_settings(theme, cfont, song, alarm_set, set_alarm_timer, Set_Format, fullscreen_mode):
    # Set Clock Format for 12 or 24 hour options
    speak_options = ['Enabled', 'Disabled']
    volume_level = ['25%', '50%', '75%', '100%']

    #Set Home
    home_folder = os.path.expanduser('~')

    sg.theme(theme)   # Add a touch of color
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('Should the automated voice that tells the time be enabled?'), sg.Push()],
                [sg.Push(), sg.Combo(speak_options), sg.Push()],
                [sg.Push(), sg.Text('Change Volume?'), sg.Push()],
                [sg.Push(), sg.Combo(volume_level), sg.Push()],
                [sg.Push(), sg.OK(), sg.Cancel(), sg.Push()],
                [sg.VPush()]
        ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        #select and click 'OK', change theme value 
        #and pass over  make_window function it
        if event == 'OK':
            autospeak_setting=values[0]
            voice_setting=values[1]
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_format = yaml.safe_load(f)

            for yaml_format['VoiceSetting'][0]["VoiceSetting"] in yaml_format:
                yaml_format['VoiceSetting'][0]["VoiceSetting"] = autospeak_setting
            for yaml_format['VoiceVolume'][0]["VoiceVolume"] in yaml_format:
                yaml_format['VoiceVolume'][0]["VoiceVolume"] = voice_setting

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_format, f)

            window.close()
            main()
                #End Alarm Values check
        if event == "Cancel" or event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

def time_set(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    song = get_song()
#        song = yaml_song['SetSong'][0]["Song_Location"]
    sg.theme(theme)   # Add a touch of color
    #Set Home
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text(f'Option to Manually set time. This is helpful if using pyArmClock offline.'), sg.Push()],
                [sg.Push(), sg.Text(f'WARNING: Changing this setting will change your computer clock time.'), sg.Push()],
                [sg.Push(), sg.Text(f'What time would you like to set the clock to?'), sg.Push()],
                [sg.Combo(Hour), sg.Combo(Min), sg.Combo(Time_Period)],
                [sg.Push(), sg.Button('Ok'), sg.Cancel(), sg.Push()],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, finalize=True, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='songtimeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        if event == event == "Cancel" or sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

        if event == 'Ok': # if user closes window or clicks cancel
            print(values[1])
            if values[0] and values[1] and values[2]:
                window.close()
                break
            elif not values[0] or not values[1] or not values[2]:
                window.close()
                sg.theme(theme)   # Add a touch of color
                # All the stuff inside your window.
                layouterror = [     [sg.VPush()],  
                            [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                            [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                            [sg.Text('ALARM TIME REQUIRED!!')],
                            [sg.Button('Ok')],
                            [sg.VPush()]
                            
                        ]

                # Create the Window
                window1 = sg.Window('pyArmClock', layouterror, element_justification='c', resizable=True)
                while True:
                    event, values = window1.read(timeout=10,timeout_key='timeout')
                    if fullscreen_mode == True:
                        window1.Maximize()
                    if event == 'timeout':
                        window['clocktime'].update(now(Set_Format, 'time'))
                        window['date'].update(now(Set_Format, 'date'))
                    if event == sg.WIN_CLOSED or event == 'Ok': # if user closes window or clicks cancel
                        # break
                        window1.close()
                        main()
            window.close()
            # window.close()
            # break
    set_hour_temp = values[0]
    set_hour = values[0]
    set_min = values[1]
    set_time_section = values[2]

    if values[1] == 'zero':
        values1 == 0

    if set_hour == 12 and set_time_section == 'PM':
        set_hour = set_hour - 12

    if set_hour == 12 and set_time_section == 'AM':
        set_hour = set_hour + 12

    # Conversions to make time work 
    if set_time_section == "PM":
        set_hour_conv = set_hour + 12
    else: set_hour_conv = set_hour

    if set_min < 10:
        set_min_strconv = str(set_min)
        set_min_conv = "0" + set_min_strconv
    else: set_min_conv = str(set_min)

    if set_hour_conv < 10:
        set_hour_strconv = str(set_hour_conv)
        set_hour_convfin = "0" + set_hour_strconv
    else: set_hour_convfin = str(set_hour_conv)
    
    conf_time = f'{set_hour_temp}:{set_min_conv} {set_time_section}'

    set_sec_conv = '01'


    final_time = f"{set_hour_convfin}:{set_min_conv}:{set_sec_conv}"
    os.system(f'date +%T -s "{final_time}"')
    main()




def song_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    home_folder = os.path.expanduser('~')
    song = get_song()
#        song = yaml_song['SetSong'][0]["Song_Location"]
    sg.theme(theme)   # Add a touch of color
    #Set Home
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text(f'Current Alarm Song is: {song}', key='songchoice'), sg.Push()],
                [sg.Push(), sg.FileBrowse('Choose Song', file_types=(("MP3 files", "*.mp3 *.flac"),)), sg.Push()],
                [sg.Push(), sg.Button('Ok'), sg.Cancel(), sg.Push()],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='songtimeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"
        if event == 'songtimeout':
            window['songchoice'].update(get_song())
        #Set Song Info
        if event == 'Choose Song':
            window.close()
            song_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        song = values['Choose Song']
        if song != '':

            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_song = yaml.safe_load(f)

            for yaml_song['SetSong'][0]["Song_Location"] in yaml_song:
                yaml_song['SetSong'][0]["Song_Location"] = song

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_song, f)

        if event == event == "Cancel" or sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

        if event == 'Ok': # if user closes window or clicks cancel
            window.close()
            make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
            break

def get_song():
    home_folder = os.path.expanduser('~')
    with open(f'{home_folder}/pyArmClock/config.yaml') as s:
        alarms = yaml.load(s, Loader=yaml.FullLoader)
    song = alarms['SetSong'][0]['Song_Location']
    return song

         
def clock_format(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    # Set Clock Format for 12 or 24 hour options
    format_options = ['12', '24']

    #Set Home
    home_folder = os.path.expanduser('~')

    sg.theme(theme)   # Add a touch of color
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('Choose Clock Format'), sg.Push()],
                [sg.Push(), sg.Combo(format_options), sg.Push()],
                [sg.Push(), sg.OK(), sg.Cancel(), sg.Push()],
                [sg.VPush()]
        ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        #select and click 'OK', change theme value 
        #and pass over  make_window function it
        if event == 'OK':
            clock_setting=values[0]
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_format = yaml.safe_load(f)

            for yaml_format['SetFormat'][0]["Set_Format"] in yaml_format:
                yaml_format['SetFormat'][0]["Set_Format"] = clock_setting

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_format, f)

            window.close()
            main()
                #End Alarm Values check
        if event == "Cancel" or event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()


def make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    sg.theme(theme)   # Add a touch of color
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                [sg.Text('When would you like to wake up?'), sg.Text('Select Time:')],
                [sg.Combo(Hour), sg.Combo(Min), sg.Combo(Time_Period), sg.Button('Ok')],
                [sg.Button('Saved Alarm or Options')],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')

        # Check if alarm values were populated

        if event == 'timeout':
            window['clocktime'].update(now(Set_Format, 'time'))
            window['date'].update(now(Set_Format, 'date'))

        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"
        
        if event == "Saved Alarm or Options":
            window.close()
            alarm_options(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)

        #End Alarm Values check
        if event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()

        if event == 'Ok': # if user closes window or clicks cancel
            print(values[1])
            if values[1] == 0:
                values[1] = 'zero'
                print(values[1])  

            if values[0] and values[1] and values[2]:
                window.close()
                break
            elif not values[0] or not values[1] or not values[2]:
                window.close()
                sg.theme(theme)   # Add a touch of color
                # All the stuff inside your window.
                layouterror = [     [sg.VPush()],  
                            [sg.Push(), sg.Text('',key='date',font=(cfont,15),justification='center'), sg.Push()],
                            [sg.Push(), sg.Text('',key='clocktime',font=(cfont,60),justification='center'), sg.Push()],
                            [sg.Text('ALARM TIME REQUIRED!!')],
                            [sg.Button('Ok')],
                            [sg.VPush()]
                            
                        ]

                # Create the Window
                window1 = sg.Window('pyArmClock', layouterror, element_justification='c', resizable=True)
                while True:
                    event, values = window1.read(timeout=10,timeout_key='timeout')
                    if fullscreen_mode == True:
                        window1.Maximize()
                    if event == 'timeout':
                        window['date'].update(now(Set_Format, 'date'))
                        window['clocktime'].update(now(Set_Format, 'time'))
                    if event == sg.WIN_CLOSED or event == 'Ok': # if user closes window or clicks cancel
                        # break
                        window1.close()
                        main()
            window.close()
            # window.close()
            # break

    hour_temp = values[0]
    hour_time = values[0]
    time_section = values[2]

    if values[1] == 'zero':
        values[1] = 0

    min_time = values[1]

    if hour_time == 12 and time_section == 'PM':
        hour_time = hour_time - 12

    if hour_time == 12 and time_section == 'AM':
        hour_time = hour_time + 12

    # Conversions to make time work 
    if time_section == "PM":
        hour_conv = hour_time + 12
    else: hour_conv = hour_time

    if min_time < 10:
        min_strconv = str(min_time)
        min_conv = "0" + min_strconv
    else: min_conv = str(min_time)

    if hour_conv < 10:
        hour_strconv = str(hour_conv)
        hour_convfin = "0" + hour_strconv
    else: hour_convfin = str(hour_conv)
    
    set_time = f'{hour_temp}:{min_conv} {time_section}'
    print(set_time)

    current_time = time.localtime()
    if current_time.tm_sec < 10:
        sec_strconv = str(current_time.tm_sec)
        sec_conv = "0" + sec_strconv
    else: sec_conv = str(current_time.tm_sec)


    set_alarm_timer = f"{hour_convfin}:{min_conv}:{sec_conv}"
    Time_Period
    alarm(set_alarm_timer, song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode)

def config_setup(startup_select):
    if startup_select == True:
        config_location = os.path.expanduser('~') + '/pyArmClock/config.yaml'
        song_path = os.path.exists(os.path.expanduser('~') + '/pyArmClock/config.yaml')
        with open(config_location, 'a') as f:
            line1 = '---'
            linenew = '\n'
            line2 = 'Alarm1:'
            line3 = '  - Alarm_Name: New Alarm'
            line4 = "  - Time: '08:00:00'"
            line5 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line6 = 'Alarm2:'
            line7 = '  - Alarm_Name: New Alarm'
            line8 = "  - Time: '08:00:00'"
            line9 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line10 = 'Alarm3:'
            line11 = '  - Alarm_Name: New Alarm'
            line12 = "  - Time: '08:00:00'"
            line13 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line14 = "SetSong:"
            line15 = f"  - Song_Location: {song_path}"
            line16 = "SetFont:"
            line17 = "  - Set_Font: 'Times New Roman'"
            line18 = "SetTheme:"
            line19 = "  - Set_Theme: 'DarkBrown'"
            line20 = "SetFormat:"
            line21 = "  - Set_Format: '12'"
            line22 = "SetSnooze:"
            line23 = "  - Set_Snooze: 600"
            line24 = "FullscreenMode:"
            line25 = "  - FullscreenMode: True"
            line26 = "TimeSet:"
            line27 = "  - TimeSet: Automatic"
            line28 = "ScreenSize:"
            line29 = "  - ScreenSize: NoneSet"
            line30 = "VoiceSetting:"
            line31 = "  - VoiceSetting: Enabled"
            line32 = "VoiceVolume:"
            line33 = "  - VoiceVolume: 100%"

            f.writelines([line1, linenew, line2, linenew, line3, linenew, line4, linenew, line5, linenew, line6, linenew, line7, linenew, line8, linenew, line9, linenew, line10, linenew, line11, linenew, line12, linenew, line13, linenew, line14, linenew, line15, linenew, line16, linenew, line17, linenew, line18, linenew, line19, linenew, line20, linenew, line21, linenew, line22, linenew, line23, linenew, line24, linenew, line25, linenew, line26, linenew, line27, linenew, line28, linenew, line29, linenew, line30, linenew, line31, linenew, line32, linenew, line33])
    else: 
        config_location = os.path.expanduser('~') + '/pyArmClock/config.yaml'
        song_path = (os.path.expanduser('~') + '/pyArmClock/ExampleMusic/UpInSpace.mp3')
        with open(config_location, 'a') as f:
            line1 = '---'
            linenew = '\n'
            line2 = 'Alarm1:'
            line3 = '  - Alarm_Name: Alarm1'
            line4 = "  - Time: '08:00:00'"
            line5 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line6 = 'Alarm2:'
            line7 = '  - Alarm_Name: Alarm2'
            line8 = "  - Time: '08:00:00'"
            line9 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line10 = 'Alarm3:'
            line11 = '  - Alarm_Name: Alarm3'
            line12 = "  - Time: '08:00:00'"
            line13 = "  - Sound: os.path.expanduser('~') + '/pyArmClock/ExampleMusic'"
            line14 = "SetSong:"
            line15 = f"  - Song_Location: {song_path}"
            line16 = "SetFont:"
            line17 = "  - Set_Font: 'Times New Roman'"
            line18 = "SetTheme:"
            line19 = "  - Set_Theme: 'DarkBrown'"
            line20 = "SetFormat:"
            line21 = "  - Set_Format: '12'"
            line22 = "SetSnooze:"
            line23 = "  - Set_Snooze: 600"
            line24 = "FullscreenMode:"
            line25 = "  - FullscreenMode: False"
            line26 = "TimeSet:"
            line27 = "  - TimeSet: Automatic"
            line28 = "ScreenSize:"
            line29 = "  - ScreenSize: NoneSet"
            line30 = "VoiceSetting:"
            line31 = "  - VoiceSetting: Enabled"
            line32 = "VoiceVolume:"
            line33 = "  - VoiceVolume: 100%"

            f.writelines([line1, linenew, line2, linenew, line3, linenew, line4, linenew, line5, linenew, line6, linenew, line7, linenew, line8, linenew, line9, linenew, line10, linenew, line11, linenew, line12, linenew, line13, linenew, line14, linenew, line15, linenew, line16, linenew, line17, linenew, line18, linenew, line19, linenew, line20, linenew, line21, linenew, line22, linenew, line23, linenew, line24, linenew, line25, linenew, line26, linenew, line27, linenew, line28, linenew, line29, linenew, line30, linenew, line31, linenew, line32, linenew, line33])

def first_boot():
    sg.theme('darkbrown')   # Add a touch of color
    # Check if pyArmClock Folder exists in Home dir
    
    #python program to check if a directory exists
    home_folder_create = os.path.expanduser('~')
    path = f'{home_folder_create}/pyArmClock'
    # Check whether the specified path exists or not
    isExist = os.path.exists(path)
    if isExist == False:
       os.makedirs(path)

    home_folder_create_music = os.path.expanduser('~')
    path_music = f'{home_folder_create_music}/pyArmClock/Music'
    # Check whether the specified path exists or not
    isExistMusic = os.path.exists(path_music)
    if isExistMusic == False:
       os.makedirs(path_music)
    # All the stuff inside your window.
    layout = [  [sg.VPush()],
                [sg.Text("Welcome to pyArmClock! It appears this is the first time you're booting the program.")],
                [sg.Text("Should the program run in fullscreen mode? This will maximize the screen but also prevent use of background tasks without killing the app.")],
                [sg.Button('yes'), sg.Button('no')],
                [sg.VPush()]
                
            ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read()

        #End Alarm Values check
        if event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            startup_select = False
            return startup_select
            break

        if event == 'yes': # if user closes window or clicks cancel
            window.close()
            startup_select = True
            return startup_select
            break
        elif event == 'no':
            window.close()
            startup_select = False
            return startup_select
            break


def main():
    # Establish clock values dictionary
    values = {0: '', 1: '', 2: ''}
    # Check if first time boot. If it is, ask if program should be fullscreen mode.
    while True:

        file_exists = os.path.exists(os.path.expanduser('~') + '/pyArmClock/config.yaml')
        if file_exists == False:
            startup_select = first_boot()
        # Check if Config File exists and create if not
        if file_exists == False:
            config_setup(startup_select)
        break

    #Set Default Values via saved config file
    home_folder = os.path.expanduser('~')
# Call in alarms file
    with open(f'{home_folder}/pyArmClock/config.yaml') as f:
        alarms = yaml.load(f, Loader=yaml.FullLoader)

    #preset font and theme
    alarm_set=False
    cfont= alarms['SetFont'][0]['Set_Font']
    theme= alarms['SetTheme'][0]['Set_Theme']
    song = alarms['SetSong'][0]['Song_Location']
    snooze_setting = alarms['SetSnooze'][0]['Set_Snooze']
    Time_Format = alarms['SetFormat'][0]['Set_Format']
    fullscreen_mode = alarms['FullscreenMode'][0]['FullscreenMode']
    set_alarm_timer = 'Not Defined'
    set_time = 'Net Defined'
    window=make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Time_Format, snooze_setting, fullscreen_mode)

def theme_choose(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):

    #Set Home
    home_folder = os.path.expanduser('~')

    sg.theme(theme)   # Add a touch of color
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('Theme Browsing'), sg.Push()],
                [sg.Push(), sg.Text('Please Choose Theme'), sg.Push()],
                [sg.Push(), sg.Combo(values=sg.theme_list(),size=(20,12),key='-LIST-',readonly=True), sg.Push()],
                [sg.Push(), sg.OK(),sg.Cancel(), sg.Push()],
                [sg.VPush()]
        ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        #select and click 'OK', change theme value 
        #and pass over  make_window function it
        if event == 'OK':
            theme=values['-LIST-']
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_theme = yaml.safe_load(f)

            for yaml_theme['SetTheme'][0]["Set_Theme"] in yaml_theme:
                yaml_theme['SetTheme'][0]["Set_Theme"] = theme

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_theme, f)

            window.close()
            if alarm_set == False:
                make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
            elif alarm_set == True:
                alarm(set_alarm_timer, song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode)
        if event == "Cancel" or event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()


def clock_font(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode):
    #when click font change button, open the window its looks like theme window
    #Set Home
    home_folder = os.path.expanduser('~')
    #layout and window create

    sg.theme(theme)   # Add a touch of color
    layout = [  [sg.VPush()],
                [sg.Push(), sg.Text('Font Chooser'), sg.Push()],
                [sg.Push(), sg.Text('Please Choose Clock Font'), sg.Push()],
                [sg.Push(), sg.Combo(values=tkinter.font.families(),size=(20,12),key='-FONT-',readonly=True), sg.Push()],
                [sg.Push(), sg.OK(),sg.Cancel(), sg.Push()],
                [sg.VPush()]
        ]
        # Create the Window
    window = sg.Window('pyArmClock', layout, element_justification='c', resizable=True)
    # Event Loop to process "events" and get the "values" of the inputs
    while True:
        event, values = window.read(timeout=10,timeout_key='timeout')
        if fullscreen_mode == True:
            window.Maximize()
            window.TKroot["cursor"] = "none"

        #change font value and pass over make_window function it
        if event == 'OK':
            cfont=values['-FONT-']
            with open(f'{home_folder}/pyArmClock/config.yaml') as f:
                yaml_font = yaml.safe_load(f)

            for yaml_font['SetFont'][0]["Set_Font"] in yaml_font:
                yaml_font['SetFont'][0]["Set_Font"] = cfont

            with open(f'{home_folder}/pyArmClock/config.yaml', 'w') as f:
                yaml.dump(yaml_font, f)
            window.close()
            if alarm_set == False:
                make_window(theme, cfont, song, alarm_set, set_alarm_timer, set_time, Set_Format, snooze_setting, fullscreen_mode)
            elif alarm_set == True:
                alarm(set_alarm_timer, song, snooze_setting, theme, cfont, set_time, Set_Format, fullscreen_mode)
        if event == "Cancel" or event == sg.WIN_CLOSED: # if user closes window or clicks cancel
            window.close()
            main()
            
        
    wnd.close()

main()
